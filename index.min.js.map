{"version":3,"file":"index.min.js","sources":["src/index.js"],"sourcesContent":["const isFun = value => typeof value === 'function';\nconst isObj = value => Object.prototype.toString.call(value) === '[object Object]';\nconst isNum = value => typeof value === 'number' && !Number.isNaN(value) && Number.isFinite(value);\n\n/**\n * 一个倒计时专用工具类，可用来创建倒计时对象\n * @param {number} time 倒计时时间\n * @param {Object} options 倒计时参数\n * @param {Function} tickCallback 倒计时步进回调\n *\n * @example\n * import CountDown from 'count-time-down'; \n * // In NodeJS\n * const CountDown = require('count-time-down');\n *\n * 1. 创建并自动开启一个24小时的倒计时\n * new CountDown(864e5, cd => console.log(cd.hhmmss));\n *\n * 2. 创建并自动开启一个60s的倒计时\n * new CountDown(10000, { cdType: 's' }, cd => console.log(cd.s));\n * \n * 3. 创建一个可以显示毫秒的定时器\n * new CountDown(10000, { interval: 50 }, ({ss, SSS}) => { \n *   console.log(`${ss} ${SSS}`);\n * });\n * \n * 4. 创建一个60s倒计时，手动开始和结束\n * const cd = new CountDown(60000, { autoStart: false }, () => {\n *   console.log(cd);\n * });\n * // A moment later\n * cd.start();\n * \n * 5. 创建一个倒计时，自定义参数再启动\n * const cd = new CountDown();\n * cd.time = 10000;\n * cd.cdType = 's';\n * cd.onTick = cd => console.log(cd);\n * cd.start();\n * // A moment later\n * cd.stop();\n * // A moment later\n * cd.start();\n * // Destory The countdown\n * cd.destory();\n */\nfunction CountDown(time, options, tickCallback) {\n  if (isFun(time)) {\n    tickCallback = time;\n  } else if (isFun(options)) {\n    tickCallback = options;\n  }\n  options = isObj(options) ? options : {};\n  this.options = options;\n  // 初始时间\n  this.initTime = isNum(time) ? time : null;\n  // 剩余时间\n  this.restTime = this.time;\n  // 定时间隔\n  this.interval = isNum(options.interval) ? options.interval : 1000;\n  // 是否自动启动倒计时\n  this.autoStart = options.autoStart !== false;\n  // 倒计时类型，d: 到天，h: 到小时，m: 到分钟，s: 到秒，S: 到毫秒，默认：'h'.\n  this.cdType = ['d', 'h', 'm', 's', 'S'].indexOf(options.cdType) > -1 ? options.cdType : 'h';\n  this.running = false;\n  this.destoryed = false;\n  this.completed = false;\n  this.tickTimes = 0;\n  this.restDays = null;\n  this.restHours = null;\n  this.restMinuts = null;\n  this.restSeconds = null;\n  this.restMillisecond = null;\n  this.d = null;\n  this.h = null;\n  this.m = null;\n  this.s = null;\n  this.S = null;\n  this.dd = '--';\n  this.hh = '--';\n  this.mm = '--';\n  this.ss = '--';\n  this.SSS = '---';\n  this.ms = '-:-';\n  this.hms = '-:-:-';\n  this.mmss = '--:--';\n  this.hhmmss = '--:--:--';\n  this.timerId = null;\n  /**\n   * 开始倒计时\n   */\n  this.start = function () {\n    if (this.destoryed) return;\n    this.running = true;\n    if (this.interval >= 0 && this.restTime >= this.interval) {\n      this.completed = false;\n      clearInterval(this.timerId);\n      this.timerId = setInterval(() => this.tick(), this.interval);\n    } else {\n      this.setComplete();\n    }\n  };\n  /**\n   * 暂停倒计时\n   */\n  this.stop = function () {\n    clearInterval(this.timerId);\n    this.running = false;\n  };\n  /**\n   * 销毁倒计时\n   */\n  this.destory = function () {\n    clearInterval(this.timerId);\n    this.running = false;\n    this.destoryed = true;\n  };\n  /**\n   * 定时器结束\n   */\n  this.setComplete = function () {\n    clearInterval(this.timerId);\n    this.running = false;\n    this.completed = true;\n  };\n  /**\n   * 定时步进\n   */\n  this.tick = function () {\n    this.tickTimes++;\n    if (this.restTime > this.interval) {\n      this.restTime -= this.interval;\n      this.setValue();\n    } else {\n      this.restTime = 0;\n      this.setValue();\n      this.setComplete();\n    }\n    if (isFun(this.onTick)) this.onTick(this);\n    if (isFun(tickCallback)) tickCallback(this);\n  };\n  /**\n   * 设置定时器的值\n   */\n  this.setValue = function () {\n    if (!this.restTime || this.restTime < 0) this.restTime = 0;\n    this.restDays = Math.floor(this.restTime / 864e5);\n    this.restHours = Math.floor(this.restTime / 36e5);\n    this.restMinuts = Math.floor(this.restTime / 6e4);\n    this.restSeconds = Math.floor(this.restTime / 1000);\n    this.restMillisecond = this.restTime;\n    if (this.cdType === 'd') {\n      const restSeconds = Math.floor(this.restTime % 864e5 / 1000);\n      this.d = this.restDays;\n      this.h = Math.floor(restSeconds / 3600);\n      this.m = Math.floor((restSeconds % 3600) / 60);\n      this.s = Math.floor(restSeconds % 60);\n    } else if (this.cdType === 'h') {\n      this.d = 0;\n      this.h = this.restHours;\n      this.m = Math.floor((this.restSeconds % 3600) / 60);\n      this.s = Math.floor(this.restSeconds % 60);\n    } else if (this.cdType === 'm') {\n      this.d = this.h = 0;\n      this.m = this.restMinuts;\n      this.s = Math.floor(this.restSeconds % 60);\n    } else if (this.cdType === 's') {\n      this.d = this.h = this.m = 0;\n      this.s = this.restSeconds;\n    } else if (this.cdType === 'S') {\n      this.d = this.h = this.m = this.s = 0;\n      this.S = this.restMillisecond;\n    }\n    if (this.cdType !== 'S') {\n      this.S = Math.floor(this.restTime % 1000);\n    }\n    const dhmsS = 'dhmsS';\n    dhmsS.substr(dhmsS.indexOf(this.cdType)).split('').forEach(item => {\n      const itemStr = String(this[item]);\n      let itemLen = 2, itemTpl = item + item;\n      if (item === 'S') {\n        itemLen ++;\n        itemTpl += item;\n      }\n      this[itemTpl] = itemStr.length < itemLen ? ('00' + itemStr).substr(-itemLen) : itemStr;\n    });\n    const co = ':';\n    this.ms = this.m + co + this.s;\n    this.hms = this.h + co + this.m + co + this.s;\n    this.mmss = this.mm + co + this.ss;\n    this.hhmmss = this.hh + co + this.mm + co + this.ss;\n    ['dd', 'hh', 'mm', 'ss', 'ms', 'hms', 'mmss', 'hhmmss'].forEach(item => {\n      this[item] = this[item].replace(/-/g, '0');\n    });\n  };\n  /**\n   * 判断是否自动开启\n   */\n  if (isNum(this.time)) {\n    this.setValue();\n    if (this.autoStart) {\n      setTimeout(() => this.start());\n    }\n  }\n}\n/**\n * 初始时间为null时，可以再次设置开始时间\n */\nObject.defineProperty(CountDown.prototype, 'time', {\n  get: function get() {\n    return this.initTime;\n  },\n  set: function set(val) {\n    if (isNum(val)) {\n      this.initTime = val;\n      this.restTime = val;\n    }\n  },\n});\nexport default CountDown;\n"],"names":["isFun","value","isNum","Number","isNaN","isFinite","time","options","Object","prototype","toString","call","initTime","autoStart","running","tickTimes","restDays","restHours","restMinuts","restSeconds","restMillisecond","d","h","m","s","S","dd","hh","mm","ss","SSS","ms","hms","mmss","hhmmss","timerId","setComplete","this","completed","tick","restTime","interval","setValue","onTick","tickCallback","Math","floor","cdType","indexOf","substr","itemStr","String","itemLen","item","co","_this2","start","get"],"mappings":";;;;0OAAA,IAAMA,EAAQ,SAAAC,SAA0B,mBAAVA,GAExBC,EAAQ,SAAAD,SAA0B,iBAAVA,IAAuBE,OAAOC,MAAMH,IAAUE,OAAOE,SAASJ,0BAD9EA,gBA8CKK,IACAA,OACAC,GAhDLN,MAAmD,oBAA1CO,OAAOC,UAAUC,SAASC,KAAKV,QAmDpDM,aAAeA,OAGVK,SAAWV,EAAMI,GAAQA,EAAO,kCAMhCO,2CAGAC,gCAGAC,OAAL,6DACKC,gBACAC,WAAY,OACZC,kBACAC,iBACAC,mBACAC,oBACAC,qBACAC,sBACAC,0BACAC,EAAI,UACJC,YACAC,YACAC,YACAC,YACAC,aACAC,GAAK,UACLC,aACAC,aACAC,IAAL,WACKC,qJASY,iBACoB,iDAAjC,mCAEKC,+LAgBPC,8GAQKC,mCAKFC,KAAO,gBACLxB,YACDsB,KAAKG,SAAWH,KAAKI,eAClBD,UAAYH,KAAKI,cACjBC,kBAEAF,SAAW,OACXE,gBACAN,eAEHpC,EAAMqC,KAAKM,SAASN,KAAKM,OAAON,MAChCrC,EAAM4C,IAAeA,EAAaP,wGAMjCrB,oBAAsBwB,0BACtBxB,8CACAC,8CACAC,+CACAC,gBAAkBkB,uCAEHQ,KAAKC,yDAElBzB,EAAIwB,KAAK7B,mBACTM,EAAIuB,KAAKC,MAAM3B,EAAc,cAC7BI,EAAIsB,KAAKC,MAAO3B,EAAc,cAC1B0B,KAAKC,aACTzB,EAAI,OACJA,EAAIgB,oBACJf,EAAIuB,KAAK5B,qCACTM,EAAIsB,KAAKC,MAAOT,KAAKlB,YAAc,KACfA,MAAhB0B,KAAKC,aACTzB,EAAIgB,KAAKU,SACT1B,EAAIgB,KAAKf,gBACTC,EAAIsB,KAAK3B,4BACWC,MAAhB0B,KAAKC,aACTzB,EAAIgB,KAAKU,gBACT1B,EAAIgB,KAAKf,aACd,MAASe,KAAKlB,cACTE,EAAIgB,KAAKU,uBACT1B,EAAIgB,KAAKf,oGAMhB0B,yDACMC,eACEC,EAAUC,EACZC,EAAUC,kBAEZD,sFAMCrB,SAAKT,SAAVC,gBACKS,UAAMJ,GAAA0B,eACNrB,YAAON,GAAA2B,OAAZ1B,6BACmBD,2DACnB4B,aAAsC,KAAtC,+EASI,SAAJC,mBAOJhD,+EAEEiD,IAAK"}